install.packages('tidyverse')
install.packages("devtools")

#May need to update the rlang package upon restart
#remotes::update_packages("rlang")

devtools::install_github("meysubb/cfbscrapR")
remotes::install_github("rstudio/gt")

#Install and run the Rcpp package if not done

library(tidyverse)
library(cfbscrapR)
library(gt)
library(dplyr)
library(ggplot2)

pbp_2019 <- data.frame()
for(i in 1:15){
  data <- cfb_pbp_data(year = 2019, season_type = "both", week = i, epa_wpa = TRUE) %>% mutate(week = i)
  df <- data.frame(data)
  pbp_2019 <- bind_rows(pbp_2019, df)
}

#To clean up what we want to see that's useable
pbp_2019 %>% select(offense_play, defense_play, down, distance, play_type, yards_gained) %>% head()

#Creating a plays variable
plays <- pbp_2019 %>% filter(rush == 1 | pass == 1)

#Looking at offensive plays
offense <- plays %>% group_by(offense_play) %>% summarise(ypa = mean(yards_gained[pass==1]), ypr = mean(yards_gained[rush==1]), num.plays = n()) %>% filter(num.plays > 300)

#Creating EPA variable
offense <- plays %>% group_by(offense_play) %>% summarise(epa.pass.off = mean(EPA[pass==1]), epa.rush.off = mean(EPA[rush==1]), num.plays = n()) %>% filter(num.plays > 300)
defense <- plays %>% group_by(defense_play) %>% summarise(epa.pass.def = mean(EPA[pass==1]), epa.rush.def = mean(EPA[rush==1]), num.plays = n()) %>% filter(num.plays > 300)
team.epa <- left_join(offense, defense, by = c("offense_play" = "defense_play")) 
head(team.epa)

#Creating a success rate variable
success.rate.offense <- plays %>% group_by(offense_play) %>% summarise(success.rate = mean(success), num.plays = n()) %>% filter(num.plays > 300)
team.epa$success.rate <- success.rate.offense$success.rate


###Computing Drives
# merge games and drives data and convert starting
#yard line to consistent scale - opposite of
#"adj_yd_line" in pbp data, because we want to 
#data to be 0-100 for everyone. 
#can compute successes and drives, other variables
drives_2019 <- data.frame()
for(i in 1:15){
  data <- cfb_pbp_data(year = 2019, week = i, epa_wpa = TRUE, drive = TRUE ) %>% mutate(week = i)
  df <- data.frame(data)
  drives_2019 <- bind_rows(drives_2019, df)
}

# Gather game data for home/away
games <- cfb_game_info(2019) %>% rename("game_id" = id)

#Tells us the number of drives and average starting
#field position for each team
drives.off <- drives_2019 %>% left_join(games, by = c("game_id")) %>%
  mutate(
    adj_start_yardline = ifelse(offense == away_team, 100-start_yardline, start_yardline), 
    success = ifelse(drive_result %in% c("TD", "FG"), 1, 0)) %>%
  group_by(offense) %>% 
  summarise(
    fp = mean(adj_start_yardline[adj_start_yardline > 10 & adj_start_yardline <40]), 
    srate = mean(success),
    drives = n())

#Merge drive data for app
names(drives.off)[names(drives.off) == "offense"] <- "offense_play"
team.epa <- left_join(team.epa, drives.off, by="offense_play")




###############################################
#Create a table that will be used for Shiny app
###############################################
cfb.table <- data.frame(team.epa %>% 
                          select(offense_play, success.rate, epa.pass.off, epa.rush.off, epa.pass.def, epa.rush.def, fp, drives) %>% gt() %>%
                          tab_header(title = "2019 Season"))

#Define the user interface
ui <- fluidPage(
  h1("College Football Analytics"),
  DT::dataTableOutput("table"),
  theme = shinytheme("cerulean")
)

#Define server logic
server <- function(input, output) {
  output$table = DT::renderDataTable({
    datatable(cfb.table,
              rownames = FALSE, 
              class = 'cell-border stripe',
              colnames = c('Team', 'Success Rate',
                           'Pass EPA', 'Run EPA',
                           'Pass EPA Def.',
                           'Run EPA Def.',
                           'Avg. Starting LOS',
                           'Drives'),
              list(pageLength = 25)) %>%
      formatPercentage(c('success.rate'),1) %>%
      formatRound(c('epa.pass.off'),3) %>%
      formatRound(c('epa.rush.off'),3) %>%
      formatRound(c('epa.pass.def'),3) %>%
      formatRound(c('epa.rush.def'),3) %>%
      formatRound(c('fp'),1)
  })
}

#Run the application
shinyApp(ui = ui, server = server)
